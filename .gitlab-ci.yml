image: shahinzaman/runner-tools:2.0.0

variables:
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
  TRIVY_CACHE_DIR: "/cache/trivy"

cache:
  key: "trivy-db-cache"
  paths:
    - $TRIVY_CACHE_DIR

stages:
  - build
  - test
  - scan
  - deploy

before_script:
  - export HOME=/root
  - mkdir -p /home/shahinzaman
  - ln -s /root/.minikube /home/shahinzaman/.minikube || true
  - ln -s /root/.kube /home/shahinzaman/.kube || true
  - eval $(minikube -p minikube docker-env)
  - echo "DOCKER_HOST is $DOCKER_HOST"
  - docker info
  - docker ps

build:
  stage: build
  parallel:
    matrix:
      - SERVICE_NAME: authentication-service
      - SERVICE_NAME: broker-service
      - SERVICE_NAME: front-end
      - SERVICE_NAME: listener-service
      - SERVICE_NAME: logger-service
      - SERVICE_NAME: mailer-service
  tags:
    - docker
  script:
    - echo "üî® Building $SERVICE_NAME..."
    - docker build -t $SERVICE_NAME:$IMAGE_TAG "$CI_PROJECT_DIR/$SERVICE_NAME"
  after_script:
    - docker system prune -f --volumes

test:
  stage: test
  parallel:
    matrix:
      - SERVICE_NAME: authentication-service
      - SERVICE_NAME: broker-service
      - SERVICE_NAME: front-end
      - SERVICE_NAME: listener-service
      - SERVICE_NAME: logger-service
      - SERVICE_NAME: mailer-service
  tags:
    - docker
  script:
    - echo "üß™ Running tests for $SERVICE_NAME..."
    - cd $SERVICE_NAME
    - go mod tidy
    - go mod vendor
    - go test ./... -v

scan:
  stage: scan
  parallel:
    matrix:
      - SERVICE_NAME: authentication-service
      - SERVICE_NAME: broker-service
      - SERVICE_NAME: front-end
      - SERVICE_NAME: listener-service
      - SERVICE_NAME: logger-service
      - SERVICE_NAME: mailer-service
  tags:
    - docker
  script:
    - echo "üîé Scanning Docker image for $SERVICE_NAME..."
    - trivy image --severity HIGH --exit-code 1 --cache-dir $TRIVY_CACHE_DIR --skip-update $SERVICE_NAME:$IMAGE_TAG

deploy:
  stage: deploy
  tags:
    - docker
  script:
    - echo "üîê Creating Kubernetes secrets from CI/CD variables..."

    - |
      kubectl delete secret postgres-secrets --ignore-not-found
      kubectl create secret generic postgres-secrets \
        --from-literal=POSTGRES_USER="$POSTGRES_USER" \
        --from-literal=POSTGRES_PASSWORD="$POSTGRES_PASSWORD" \
        --from-literal=POSTGRES_DB="$POSTGRES_DB"

    - |
      kubectl delete secret pgadmin-secrets --ignore-not-found
      kubectl create secret generic pgadmin-secrets \
        --from-literal=PGADMIN_USER="$PGADMIN_USER" \
        --from-literal=PGADMIN_PASSWORD="$PGADMIN_PASSWORD"

    - |
      kubectl delete secret mongo-secrets --ignore-not-found
      kubectl create secret generic mongo-secrets \
        --from-literal=MONGO_INITDB_ROOT_USERNAME="$MONGO_INITDB_ROOT_USERNAME" \
        --from-literal=MONGO_INITDB_ROOT_PASSWORD="$MONGO_INITDB_ROOT_PASSWORD"

    - |
      kubectl delete secret mailer-secrets --ignore-not-found
      kubectl create secret generic mailer-secrets \
        --from-literal=MAIL_USERNAME="$MAIL_USERNAME" \
        --from-literal=MAIL_PASSWORD="$MAIL_PASSWORD"

    - |
      kubectl delete secret user-secrets --ignore-not-found
      kubectl create secret generic user-secrets \
        --from-literal=USER_EMAIL="$USER_EMAIL" \
        --from-literal=USER_PASSWORD="$USER_PASSWORD"

    - echo "üåÄ Substituting Kubernetes manifests..."
    - |
      for file in ${CI_PROJECT_DIR}/config/k8s/*.yml; do
        envsubst < "$file" > "${file%.yml}_deployment.yaml"
      done

    - echo "üöÄ Applying manifests to Minikube..."
    - |
      for file in ${CI_PROJECT_DIR}/config/k8s/*_deployment.yaml; do
        kubectl apply -f "$file" || exit 1
      done

    - echo "üåê Applying app-ingress.yaml..."
    - kubectl apply -f ${CI_PROJECT_DIR}/config/app-ingress.yml

  after_script:
    - echo "üßπ Cleaning up..."
    - rm -f ${CI_PROJECT_DIR}/config/k8s/*_deployment.yaml

