Manual one time Task before ci/cd:
==================================

---Install & configure gcloud cli (to run gcloud cli commands from local Terminal)
Note: if we're using Windows then we can run multiline commands (like in Linux/Mac) with wsl Terminal after installing and 
      configuring the gcloud cli for it...
      To install wsl in Windows:
         - install: Windows Terminal from Microsoft Store (this terminal will be used by wsl by default)
         - and then, run this in Terminal: wsl --install
               This command will enable the features necessary to run WSL (Windows Subsystem for Linux) and will install the Ubuntu distribution of Linux.
               refer to -> https://learn.microsoft.com/en-us/windows/wsl/install
      - We're going to use wsl with the Terminal to run all the gcloud cli commands here...

---To attach/add a Billing account to Google Cloud Platform (GCP) --> 
   Google Cloud Platform (GCP) -> Get started for free -> then follow the instructions...
   Note: It'll cut about $1 (One USD) to Validate the Billing account.
         - GCP will notify about the cost cutting and the Validation.
   - We should receive a $300 USD credit to explore GCP for free - if the combination of our Google & Billing Account haven't received this Credit from GCP before.

---create a Project from Google Cloud Console and collect the PROJECT_ID

---Link the validated Billing account to the project - which will Enable the Billing for the project:
      (By doing this we'll be able to work further on the project to create resources in GCP)
   Select the Project -> Menu (from the top left) -> Billing -> Link a billing account
   Note: it won't cut any cost until the Credits remain - so, don't need to worry about it - we can unlink the Billing at any time - 
         and the Credit $300 (Three Hundred USD) is sufficient enough to explore GCP - if there's no credit then it can cut (post-paid at the month-end) 
         up to $10 to $15 (Ten to Fifteen USD) (for the resources which we're going to create) - per day if resources managed properly (as of Feb 2025)...
   
   - To monitor the Billing (or Credit if using) --> 
      Google Cloud Console (https://console.cloud.google.com/) -> Billing --> Overview, Reports ...
   - To unlink the Project --> 
      Google Cloud Console (https://console.cloud.google.com/) -> Select the Project -> Billing -> Manage billing accounts -> 
         Actions menu (3 dots - at right most side of the project) -> Disable billing

---Authorizing wsl Terminal to Link with the Project
gcloud auth login --> follow the steps & complete the login with the google account (with which we've enabled the Billing & created the project) - 
                       - (it'll be authenticated as owner)...

gcloud config set project PROJECT_ID
if referred by the cli, run -->
   gcloud auth application-default set-quota-project PROJECT_ID


---Assuming the GitLab (gitlab.com) does have this "go-microservice-app-gcp" project...
   and an access-token has been created for this project (to create : Settings -> Access token -> Add new token 
   [we can tick mark all for the Developer role] -> then, Create project access token)
   - Store this access token - this is going to be needing for setting up the git origin before pushing the project code into GitLab 

---Enable GitLab Instance runners --> 
Navigate to the Project -> Settings -> CI/CD -> Turn on the Gear icon : to Enable instance runners for this project

Note: For every month one free account will have 400 unit compute minutes for the instance runners from GitLab - 
      which is sufficient to test this project. To explore more we need to buy compute minutes - 
      a 1000 unit (One thousand unit) compute minutes pack can be bought with $10.00 (Ten USD).

To buy --> Profile icon -> Preferences -> Usage Quotas (at the left bottom) -> Buy additional compute minutes -> 
                   -> follow the instructions...

---collect "project_id" --> 
gcloud config get project

---collect "project_number" --> 
gcloud projects list

---collect "namespace_id" --> 
curl --header "PRIVATE-TOKEN: <access_token_from_gitlab>" \
     "https://gitlab.com/api/v4/projects/<project_number>"

   Note: we will need this "namespace_id" to add inside of the file -> "2_configure_wif.py" - in time of running the py scripts.


---Add GitLab CI/CD Variables --> 
Navigate to the Project -> Settings -> CI/CD -> Add variable -- like below for the project :

GAR_REPO_NAME: go-microservices-repo
GCP_CLUSTER_NAME: go-microservice-cluster
GCP_PROJECT_ID: go-microservice-app-449204
GCP_REGION: us-central1
LOGGING_MONITORING_SERVICE_ACCOUNT: logging-monitoring-service-acc@<GCP_PROJECT_ID>.iam.gserviceaccount.com
TERRAFORM_SERVICE_ACCOUNT: terraform-service-account@<GCP_PROJECT_ID>.iam.gserviceaccount.com
WORKLOAD_IDENTITY_PROVIDER: projects/<project_number>/locations/global/workloadIdentityPools/<POOL_NAME>/providers/<PROVIDER_NAME> 
....(ex: POOL_NAME: gitlab-pool-1, PROVIDER_NAME: gitlab-provider-1)....

---configure "Google Cloud IAM" at GitLab --> 
   Navigate to the project -> Settings -> Integration -> Google Cloud IAM -> Configure -> Fill the necessary info --> 
      --> Save changes (the Integration should be Active)


---Modify the python scripts with necessary infos

---Pick the python scripts one by one by maintaining the indexing order and Run as specified in the heading section of each script 
   (The files should be stored and run from a secure location like ~/.gcp in Windows or ~/.config/gcloud in Mac/Linux) which can be found 
   from the folder called: "task__before_after_ci_cd" inside of the project root-directory 

---Validate the creation of the resources one by one for each python script from the Google Cloud Console --> 

1_enable_apis_accounts_roles.py --> 
- APIs & Services -> Enabled APIs & services
- IAM & Admin -> IAM
- IAM & Admin -> Service Accounts

2_configure_wif.py --> 
- IAM & Admin -> Workload Identity Federation

3_create_vpc_network_subnetwork.py --> 
- VPC Network -> VPC networks

4_create_configure_nat_router.py --> 
- Network Connectivity Center -> Cloud Router
- Network Services -> Cloud NAT

5_create_vpc_firewall_rules.py --> 
- Network Security -> Firewall policies

6_create_artifact_registry_repository.py --> 
- Artifact Registry -> Repositories

7_create_secrets.py --> 
- Security -> Secret Manager

8_setup_notify_channel.py --> 
- Monitoring -> Alerting -> Edit notification channels


---Once the specified resources are successfully created - gcloud config get project
   update the "project_id", inside of -> config/terraform-gcp-gke/terraform.tfvars
...and if we changed & mismatched anything before - modify the terraform scripts according to that also...


---Push the code - trigger the pipeline...
Example commands to push & trigger: (in terminal from project root directory)

   git remote set-url origin https://access_token_from_gitlab@gitlab.com/shahinzaman102/go-microservice-app.git
      note: don't forget to replace: "access_token_from_gitlab" with the actual token which we did create before & also the url with: "Clone with HTTPS"
   git add .
   git commit -m "commit..."
   git push

To monitor the running pipeline - visit: the project in GitLab --> 
Build -> Pipelines -> visit the current running one and so on..
